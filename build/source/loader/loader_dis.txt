
/home/xdu/cpp/Tinyx86os/build/source/loader/loader.elf：     文件格式 elf32-i386
/home/xdu/cpp/Tinyx86os/build/source/loader/loader.elf
体系结构：i386， 标志 0x00000112：
EXEC_P, HAS_SYMS, D_PAGED
起始地址 0x00008000

程序头：
    LOAD off    0x00000000 vaddr 0x00007000 paddr 0x00007000 align 2**12
         filesz 0x00000094 memsz 0x00000094 flags r--
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x0000000e memsz 0x0000000e flags r-x
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

节：
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000000e  00008000  00008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      0000002b  00000000  00000000  0000100e  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000040  00000000  00000000  00001040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  3 .debug_info   0000005e  00000000  00000000  00001080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  4 .debug_abbrev 00000042  00000000  00000000  000010de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_line   000000c5  00000000  00000000  00001120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_frame  0000002c  00000000  00000000  000011e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_str    00000176  00000000  00000000  00001214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00008000 l    d  .text	00000000 .text
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    df *ABS*	00000000 loader_16.c
00000000 l    df *ABS*	00000000 loader_32.c
00008003 g     F .text	0000000b loader_entry
00008000 g       .text	00000000 _start
00009000 g       .text	00000000 __bss_start
00009000 g       .text	00000000 _edata
00009000 g       .text	00000000 _end



Disassembly of section .text:

00008000 <_start>:
_start:
	// 栈和段等沿用之前的设置,也可以重新设置
	// 这里简单起见，就不做任何设置了
	// 你可能会想，直接跳到loader_entry，但这样需要先知识loader_entry在哪儿
	// boot没有这个能力做到，所以直接用汇编，以便_start处于整个bin文件开头，这样boot直接跳到开头就可以
	jmp loader_entry
    8000:	e9 00 00             	jmp    8003 <loader_entry>

00008003 <loader_entry>:
__asm__(".code16gcc");

void loader_entry(void) {
    8003:	f3 0f 1e fb          	endbr32 
    8007:	66 55                	push   %ebp
    8009:	66 89 e5             	mov    %esp,%ebp
    for(;;) {}
    800c:	eb fe                	jmp    800c <loader_entry+0x9>
