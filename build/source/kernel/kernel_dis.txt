
/home/xdu/cpp/Tinyx86os/build/source/kernel/kernel.elf：     文件格式 elf32-i386
/home/xdu/cpp/Tinyx86os/build/source/kernel/kernel.elf
体系结构：i386， 标志 0x00000112：
EXEC_P, HAS_SYMS, D_PAGED
起始地址 0x00010000

程序头：
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000180 memsz 0x00002990 flags rwx
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

节：
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000180  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00002810  00010180  00010180  00001180  2**5
                  ALLOC
  2 .debug_line   0000027e  00000000  00000000  00001180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  3 .debug_info   00000332  00000000  00000000  000013fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  4 .debug_abbrev 0000021a  00000000  00000000  00001730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_aranges 00000060  00000000  00000000  00001950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_str    000002b2  00000000  00000000  000019b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .comment      0000002b  00000000  00000000  00001c62  2**0
                  CONTENTS, READONLY
  8 .debug_frame  000000e0  00000000  00000000  00001c90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
00010180 l    d  .bss	00000000 .bss
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 CMakeFiles/kernel.dir/init/start.S.obj
00010013 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 cpu.c
0001002b l     F .text	00000028 lgdt
00010180 l     O .bss	00000800 gdt_table
00000000 l    df *ABS*	00000000 init.c
00010980 l     O .bss	00000004 init_boot_info
0001014e g     F .text	0000000f cpu_init
00010177 g     F .text	00000009 init_main
00010990 g     O .bss	00002000 stack
0001015d g     F .text	0000001a kernel_init
00010000 g       .text	00000000 _start
000100dd g     F .text	00000071 init_gdt
00010053 g     F .text	0000008a segment_desc_set



Disassembly of section .text:

00010000 <_start>:
 	.global _start
	.extern kernel_init
	.extern init_main
_start:
	# 第一种方法
    push %ebp
   10000:	55                   	push   %ebp
    mov %esp, %ebp
   10001:	89 e5                	mov    %esp,%ebp
    mov 0x8(%ebp), %eax
   10003:	8b 45 08             	mov    0x8(%ebp),%eax
    push %eax
   10006:	50                   	push   %eax
	
	call kernel_init
   10007:	e8 51 01 00 00       	call   1015d <kernel_init>


	jmp $KERNEL_SELECTOR_CS, $gdt_reload
   1000c:	ea 13 00 01 00 08 00 	ljmp   $0x8,$0x10013

00010013 <gdt_reload>:

gdt_reload:
	mov $KERNEL_SELECTOR_DS, %ax		// 16为数据段选择子
   10013:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10017:	8e d8                	mov    %eax,%ds
    mov %ax, %ss
   10019:	8e d0                	mov    %eax,%ss
    mov %ax, %es
   1001b:	8e c0                	mov    %eax,%es
    mov %ax, %fs
   1001d:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
   1001f:	8e e8                	mov    %eax,%gs

	// 栈设置
	mov $(stack + KERNEL_STACK_SIZE), %esp
   10021:	bc 90 29 01 00       	mov    $0x12990,%esp

	// 栈和段等沿用之前的设置
	jmp init_main
   10026:	e9 4c 01 00 00       	jmp    10177 <init_main>

0001002b <lgdt>:

static inline void sti() {
	__asm__ __volatile__("sti");
}

static inline void lgdt(uint32_t start, uint32_t size) {
   1002b:	55                   	push   %ebp
   1002c:	89 e5                	mov    %esp,%ebp
   1002e:	83 ec 10             	sub    $0x10,%esp
		uint16_t limit;
		uint16_t start15_0;
		uint16_t start31_16;
	} gdt;

	gdt.start31_16 = start >> 16;
   10031:	8b 45 08             	mov    0x8(%ebp),%eax
   10034:	c1 e8 10             	shr    $0x10,%eax
   10037:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
	gdt.start15_0 = start & 0xFFFF;
   1003b:	8b 45 08             	mov    0x8(%ebp),%eax
   1003e:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
	gdt.limit = size - 1;
   10042:	8b 45 0c             	mov    0xc(%ebp),%eax
   10045:	83 e8 01             	sub    $0x1,%eax
   10048:	66 89 45 fa          	mov    %ax,-0x6(%ebp)

	__asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
   1004c:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   10050:	90                   	nop
   10051:	c9                   	leave  
   10052:	c3                   	ret    

00010053 <segment_desc_set>:
static segment_desc_t gdt_table[GDT_TABLE_SIZE];

/**
 * 设置段描述符
 */
void segment_desc_set(int selector, uint32_t base, uint32_t limit, uint16_t attr) {
   10053:	f3 0f 1e fb          	endbr32 
   10057:	55                   	push   %ebp
   10058:	89 e5                	mov    %esp,%ebp
   1005a:	83 ec 14             	sub    $0x14,%esp
   1005d:	8b 45 14             	mov    0x14(%ebp),%eax
   10060:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t * desc = gdt_table + (selector >> 3);
   10064:	8b 45 08             	mov    0x8(%ebp),%eax
   10067:	c1 f8 03             	sar    $0x3,%eax
   1006a:	c1 e0 03             	shl    $0x3,%eax
   1006d:	05 80 01 01 00       	add    $0x10180,%eax
   10072:	89 45 fc             	mov    %eax,-0x4(%ebp)

	// 如果界限比较长，将长度单位换成4KB
	if (limit > 0xfffff) {
   10075:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   1007c:	76 0f                	jbe    1008d <segment_desc_set+0x3a>
		attr |= 0x8000;
   1007e:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
		limit /= 0x1000;
   10084:	8b 45 10             	mov    0x10(%ebp),%eax
   10087:	c1 e8 0c             	shr    $0xc,%eax
   1008a:	89 45 10             	mov    %eax,0x10(%ebp)
	}
	desc->limit15_0 = limit & 0xffff;
   1008d:	8b 45 10             	mov    0x10(%ebp),%eax
   10090:	89 c2                	mov    %eax,%edx
   10092:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10095:	66 89 10             	mov    %dx,(%eax)
	desc->base15_0 = base & 0xffff;
   10098:	8b 45 0c             	mov    0xc(%ebp),%eax
   1009b:	89 c2                	mov    %eax,%edx
   1009d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   100a0:	66 89 50 02          	mov    %dx,0x2(%eax)
	desc->base23_16 = (base >> 16) & 0xff;
   100a4:	8b 45 0c             	mov    0xc(%ebp),%eax
   100a7:	c1 e8 10             	shr    $0x10,%eax
   100aa:	89 c2                	mov    %eax,%edx
   100ac:	8b 45 fc             	mov    -0x4(%ebp),%eax
   100af:	88 50 04             	mov    %dl,0x4(%eax)
	desc->attr = attr | (((limit >> 16) & 0xf) << 8);
   100b2:	8b 45 10             	mov    0x10(%ebp),%eax
   100b5:	c1 e8 10             	shr    $0x10,%eax
   100b8:	c1 e0 08             	shl    $0x8,%eax
   100bb:	66 25 00 0f          	and    $0xf00,%ax
   100bf:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   100c3:	89 c2                	mov    %eax,%edx
   100c5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   100c8:	66 89 50 05          	mov    %dx,0x5(%eax)
	desc->base31_24 = (base >> 24) & 0xff;
   100cc:	8b 45 0c             	mov    0xc(%ebp),%eax
   100cf:	c1 e8 18             	shr    $0x18,%eax
   100d2:	89 c2                	mov    %eax,%edx
   100d4:	8b 45 fc             	mov    -0x4(%ebp),%eax
   100d7:	88 50 07             	mov    %dl,0x7(%eax)
}
   100da:	90                   	nop
   100db:	c9                   	leave  
   100dc:	c3                   	ret    

000100dd <init_gdt>:

/**
 * 初始化GDT
 */
void init_gdt(void) {
   100dd:	f3 0f 1e fb          	endbr32 
   100e1:	55                   	push   %ebp
   100e2:	89 e5                	mov    %esp,%ebp
   100e4:	83 ec 10             	sub    $0x10,%esp
	// 全部清空
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   100e7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   100ee:	eb 19                	jmp    10109 <init_gdt+0x2c>
        segment_desc_set(i << 3, 0, 0, 0);
   100f0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   100f3:	c1 e0 03             	shl    $0x3,%eax
   100f6:	6a 00                	push   $0x0
   100f8:	6a 00                	push   $0x0
   100fa:	6a 00                	push   $0x0
   100fc:	50                   	push   %eax
   100fd:	e8 51 ff ff ff       	call   10053 <segment_desc_set>
   10102:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   10105:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   10109:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   10110:	7e de                	jle    100f0 <init_gdt+0x13>
    }

    //数据段
    segment_desc_set(KERNEL_SELECTOR_DS, 0x00000000, 0xFFFFFFFF,
   10112:	68 92 c0 00 00       	push   $0xc092
   10117:	6a ff                	push   $0xffffffff
   10119:	6a 00                	push   $0x0
   1011b:	6a 10                	push   $0x10
   1011d:	e8 31 ff ff ff       	call   10053 <segment_desc_set>
   10122:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA
                     | SEG_TYPE_RW | SEG_D | SEG_G);

    // 只能用非一致代码段，以便通过调用门更改当前任务的CPL执行关键的资源访问操作
    segment_desc_set(KERNEL_SELECTOR_CS, 0x00000000, 0xFFFFFFFF,
   10125:	68 9a c0 00 00       	push   $0xc09a
   1012a:	6a ff                	push   $0xffffffff
   1012c:	6a 00                	push   $0x0
   1012e:	6a 08                	push   $0x8
   10130:	e8 1e ff ff ff       	call   10053 <segment_desc_set>
   10135:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE
                     | SEG_TYPE_RW | SEG_D | SEG_G);


    // 加载gdt
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   10138:	b8 80 01 01 00       	mov    $0x10180,%eax
   1013d:	68 00 08 00 00       	push   $0x800
   10142:	50                   	push   %eax
   10143:	e8 e3 fe ff ff       	call   1002b <lgdt>
   10148:	83 c4 08             	add    $0x8,%esp
}
   1014b:	90                   	nop
   1014c:	c9                   	leave  
   1014d:	c3                   	ret    

0001014e <cpu_init>:

/**
 * CPU初始化
 */
void cpu_init (void) {
   1014e:	f3 0f 1e fb          	endbr32 
   10152:	55                   	push   %ebp
   10153:	89 e5                	mov    %esp,%ebp
    init_gdt();
   10155:	e8 83 ff ff ff       	call   100dd <init_gdt>
}
   1015a:	90                   	nop
   1015b:	5d                   	pop    %ebp
   1015c:	c3                   	ret    

0001015d <kernel_init>:

static boot_info_t * init_boot_info;        // 启动信息
/**
 * 内核入口
 */
void kernel_init (boot_info_t * boot_info) {
   1015d:	f3 0f 1e fb          	endbr32 
   10161:	55                   	push   %ebp
   10162:	89 e5                	mov    %esp,%ebp
   10164:	83 ec 08             	sub    $0x8,%esp
    init_boot_info = boot_info;
   10167:	8b 45 08             	mov    0x8(%ebp),%eax
   1016a:	a3 80 09 01 00       	mov    %eax,0x10980
    // 初始化CPU，再重新加载
    cpu_init();
   1016f:	e8 da ff ff ff       	call   1014e <cpu_init>
}
   10174:	90                   	nop
   10175:	c9                   	leave  
   10176:	c3                   	ret    

00010177 <init_main>:


void init_main(void) {
   10177:	f3 0f 1e fb          	endbr32 
   1017b:	55                   	push   %ebp
   1017c:	89 e5                	mov    %esp,%ebp
    for (;;) {}
   1017e:	eb fe                	jmp    1017e <init_main+0x7>
