
/home/xdu/cpp/Tinyx86os/build/source/kernel/kernel.elf：     文件格式 elf32-i386
/home/xdu/cpp/Tinyx86os/build/source/kernel/kernel.elf
体系结构：i386， 标志 0x00000112：
EXEC_P, HAS_SYMS, D_PAGED
起始地址 0x00010000

程序头：
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000017 memsz 0x00000017 flags r-x
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

节：
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000017  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_line   0000010f  00000000  00000000  00001017  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  2 .debug_info   0000010f  00000000  00000000  00001126  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  3 .debug_abbrev 000000c6  00000000  00000000  00001235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  4 .debug_aranges 00000040  00000000  00000000  00001300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_str    000001c6  00000000  00000000  00001340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .comment      0000002b  00000000  00000000  00001506  2**0
                  CONTENTS, READONLY
  7 .debug_frame  0000002c  00000000  00000000  00001534  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 init.c
0001000e g     F .text	00000009 kernel_init
00010000 g       .text	00000000 _start



Disassembly of section .text:

00010000 <_start>:
 	.text
 	.global _start
	.extern kernel_init
_start:
	# 第一种方法
    push %ebp
   10000:	55                   	push   %ebp
    mov %esp, %ebp
   10001:	89 e5                	mov    %esp,%ebp
    mov 0x8(%ebp), %eax
   10003:	8b 45 08             	mov    0x8(%ebp),%eax
    push %eax
   10006:	50                   	push   %eax
	
	call kernel_init
   10007:	e8 02 00 00 00       	call   1000e <kernel_init>

	jmp .
   1000c:	eb fe                	jmp    1000c <_start+0xc>

0001000e <kernel_init>:


/**
 * 内核入口
 */
void kernel_init (boot_info_t * boot_info) {
   1000e:	f3 0f 1e fb          	endbr32 
   10012:	55                   	push   %ebp
   10013:	89 e5                	mov    %esp,%ebp
    for (;;) {}
   10015:	eb fe                	jmp    10015 <kernel_init+0x7>
