
/home/xdu/cpp/Tinyx86os/build/source/boot/boot.elf：     文件格式 elf32-i386
/home/xdu/cpp/Tinyx86os/build/source/boot/boot.elf
体系结构：i386， 标志 0x00000112：
EXEC_P, HAS_SYMS, D_PAGED
起始地址 0x00007c00

程序头：
    LOAD off    0x00000000 vaddr 0x00007000 paddr 0x00006000 align 2**12
         filesz 0x000000b4 memsz 0x000000b4 flags r--
    LOAD off    0x00000c00 vaddr 0x00007c00 paddr 0x00007c00 align 2**12
         filesz 0x00000023 memsz 0x00000023 flags r-x
    LOAD off    0x00000dfe vaddr 0x00007dfe paddr 0x00007dfe align 2**12
         filesz 0x00000002 memsz 0x00000002 flags r-x
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

节：
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000023  00007c00  00007c00  00000c00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 boot_end      00000002  00007dfe  00007dfe  00000dfe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002b  00000000  00000000  00000e00  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000040  00000000  00000000  00000e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  4 .debug_info   0000005e  00000000  00000000  00000e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_abbrev 00000042  00000000  00000000  00000ece  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_line   000000c1  00000000  00000000  00000f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_frame  00000034  00000000  00000000  00000fd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_str    00000134  00000000  00000000  00001008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00007c00 l    d  .text	00000000 .text
00007dfe l    d  boot_end	00000000 boot_end
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    df *ABS*	00000000 CMakeFiles/boot.dir/start.S.obj
00007dfe l       boot_end	00000000 boot_sig
00000000 l    df *ABS*	00000000 boot.c
00007c15 g     F .text	0000000e boot_entry
00007c00 g       .text	00000000 _start
00008000 g       .text	00000000 __bss_start
00008000 g       .text	00000000 _edata
00008000 g       .text	00000000 _end



Disassembly of section .text:

00007c00 <_start>:
  	.code16
 	.text
	.global _start
_start:
	// 重置数据段寄存器
	mov $0, %ax
    7c00:	b8 00 00             	mov    $0x0,%ax
	mov %ax, %ds
    7c03:	8e d8                	mov    %ax,%ds
	mov %ax, %ss
    7c05:	8e d0                	mov    %ax,%ss
	mov %ax, %es
    7c07:	8e c0                	mov    %ax,%es
	mov %ax, %fs
    7c09:	8e e0                	mov    %ax,%fs
	mov %ax, %gs
    7c0b:	8e e8                	mov    %ax,%gs

	// 根据https://wiki.osdev.org/Memory_Map_(x86)
	// 使用0x7c00之前的空间作栈，大约有30KB的RAM，足够boot和loader使用
	mov $_start, %esp
    7c0d:	66 bc 00 7c 00 00    	mov    $0x7c00,%esp

	// 原地跳转
	jmp .
    7c13:	eb fe                	jmp    7c13 <_start+0x13>

00007c15 <boot_entry>:

/**
 * Boot的C入口函数
 * 只完成一项功能，即从磁盘找到loader文件然后加载到内容中，并跳转过去
 */
void boot_entry(void) {
    7c15:	f3 0f 1e fb          	endbr32 
    7c19:	66 55                	push   %ebp
    7c1b:	66 89 e5             	mov    %esp,%ebp
}
    7c1e:	90                   	nop
    7c1f:	66 5d                	pop    %ebp
    7c21:	66 c3                	retl   

Disassembly of section boot_end:

00007dfe <boot_sig>:
    7dfe:	55                   	push   %bp
    7dff:	aa                   	stos   %al,%es:(%di)
